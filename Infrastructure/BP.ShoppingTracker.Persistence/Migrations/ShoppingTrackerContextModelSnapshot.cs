// <auto-generated />
using System;
using BP.ShoppingTracker.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BP.ShoppingTracker.Persistence.Migrations
{
    [DbContext(typeof(ShoppingTrackerContext))]
    partial class ShoppingTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.Brand", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyFK")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyFK");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.CombinedFormat", b =>
                {
                    b.Property<Guid>("MainFormatFK")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DerivedFormatFK")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("MainFormatFK", "DerivedFormatFK");

                    b.HasIndex("DerivedFormatFK");

                    b.ToTable("CombinedFormat");

                    b.HasComment("Permite la posibilidad de que un producto tenga formato derivado: (pack de 6 latas de 300g) => (pack de 6) -> (latas de 300g)");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.Company", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.CostEvolution", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductFK")
                        .HasColumnType("uuid");

                    b.Property<double?>("RateSale")
                        .HasColumnType("double precision")
                        .HasComment("En tanto por uno, porcentaje de descuento aplicado dando como resultado el valor de Value");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SalePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("ProductFK");

                    b.ToTable("CostEvolution");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.Format", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid>("FormatTypeFK")
                        .HasColumnType("uuid");

                    b.Property<int>("MeasureTypeFK")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("FormatTypeFK");

                    b.HasIndex("MeasureTypeFK");

                    b.ToTable("Format");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.FormatType", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID");

                    b.ToTable("FormatType");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.MeasureType", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsUnitBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("ScaleFactorSI")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("UnitBaseFK")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("UnitBaseFK");

                    b.ToTable("MeasureType");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("BarCode")
                        .HasColumnType("integer");

                    b.Property<Guid>("BrandFK")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("FormatFK1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FormatFK2")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("ProductTypeFK")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("BrandFK");

                    b.HasIndex("ProductTypeFK");

                    b.HasIndex("FormatFK1", "FormatFK2");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID");

                    b.ToTable("ProductCategory");

                    b.HasComment("Categoría del tipo de producto: Alimentación, perfumería etc");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.ProductType", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("ParentFK")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductCategoryFK")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("ParentFK");

                    b.HasIndex("ProductCategoryFK");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.Brand", b =>
                {
                    b.HasOne("BP.ShoppingTracker.Persistence.Entities.Company", "CompanyFKNavigation")
                        .WithMany("Brands")
                        .HasForeignKey("CompanyFK")
                        .HasConstraintName("FK_Brand_Company");

                    b.Navigation("CompanyFKNavigation");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.CombinedFormat", b =>
                {
                    b.HasOne("BP.ShoppingTracker.Persistence.Entities.Format", "DerivedFormatFKNavigation")
                        .WithMany("CombinedFormatDerivedFormatFKNavigations")
                        .HasForeignKey("DerivedFormatFK")
                        .IsRequired()
                        .HasConstraintName("FK_CombinedFormat_Format_Derived");

                    b.HasOne("BP.ShoppingTracker.Persistence.Entities.Format", "MainFormatFKNavigation")
                        .WithMany("CombinedFormatMainFormatFKNavigations")
                        .HasForeignKey("MainFormatFK")
                        .IsRequired()
                        .HasConstraintName("FK_CombinedFormat_Format_Main");

                    b.Navigation("DerivedFormatFKNavigation");

                    b.Navigation("MainFormatFKNavigation");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.CostEvolution", b =>
                {
                    b.HasOne("BP.ShoppingTracker.Persistence.Entities.Product", "ProductFKNavigation")
                        .WithMany("CostEvolutions")
                        .HasForeignKey("ProductFK")
                        .IsRequired()
                        .HasConstraintName("FK_CostEvolution_Product");

                    b.Navigation("ProductFKNavigation");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.Format", b =>
                {
                    b.HasOne("BP.ShoppingTracker.Persistence.Entities.FormatType", "FormatTypeFKNavigation")
                        .WithMany("Formats")
                        .HasForeignKey("FormatTypeFK")
                        .IsRequired()
                        .HasConstraintName("FK_Format_FormatType");

                    b.HasOne("BP.ShoppingTracker.Persistence.Entities.MeasureType", "MeasureTypeFKNavigation")
                        .WithMany("Formats")
                        .HasForeignKey("MeasureTypeFK")
                        .IsRequired()
                        .HasConstraintName("FK_Format_MeasureType");

                    b.Navigation("FormatTypeFKNavigation");

                    b.Navigation("MeasureTypeFKNavigation");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.MeasureType", b =>
                {
                    b.HasOne("BP.ShoppingTracker.Persistence.Entities.MeasureType", "UnitBaseFKNavigation")
                        .WithMany("UnitsDerived")
                        .HasForeignKey("UnitBaseFK")
                        .HasConstraintName("FK_MeasureType_MeasureType");

                    b.Navigation("UnitBaseFKNavigation");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.Product", b =>
                {
                    b.HasOne("BP.ShoppingTracker.Persistence.Entities.Brand", "BrandFKNavigation")
                        .WithMany("Products")
                        .HasForeignKey("BrandFK")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Brand");

                    b.HasOne("BP.ShoppingTracker.Persistence.Entities.ProductType", "ProductTypeFKNavigation")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeFK")
                        .IsRequired()
                        .HasConstraintName("FK_Product_ProductType");

                    b.HasOne("BP.ShoppingTracker.Persistence.Entities.CombinedFormat", "FormatFKNavigation")
                        .WithMany("Products")
                        .HasForeignKey("FormatFK1", "FormatFK2")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Format");

                    b.Navigation("BrandFKNavigation");

                    b.Navigation("FormatFKNavigation");

                    b.Navigation("ProductTypeFKNavigation");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.ProductType", b =>
                {
                    b.HasOne("BP.ShoppingTracker.Persistence.Entities.ProductType", "ParentFKNavigation")
                        .WithMany("InverseParentFKNavigation")
                        .HasForeignKey("ParentFK")
                        .HasConstraintName("FK_ProductType_ProductType");

                    b.HasOne("BP.ShoppingTracker.Persistence.Entities.ProductCategory", "ProductCategoryFKNavigation")
                        .WithMany("ProductTypes")
                        .HasForeignKey("ProductCategoryFK")
                        .IsRequired()
                        .HasConstraintName("FK_ProductType_ProductCategory");

                    b.Navigation("ParentFKNavigation");

                    b.Navigation("ProductCategoryFKNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.CombinedFormat", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.Company", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.Format", b =>
                {
                    b.Navigation("CombinedFormatDerivedFormatFKNavigations");

                    b.Navigation("CombinedFormatMainFormatFKNavigations");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.FormatType", b =>
                {
                    b.Navigation("Formats");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.MeasureType", b =>
                {
                    b.Navigation("Formats");

                    b.Navigation("UnitsDerived");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.Product", b =>
                {
                    b.Navigation("CostEvolutions");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.ProductCategory", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("BP.ShoppingTracker.Persistence.Entities.ProductType", b =>
                {
                    b.Navigation("InverseParentFKNavigation");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
