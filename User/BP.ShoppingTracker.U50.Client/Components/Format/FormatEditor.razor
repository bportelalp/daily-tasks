<EditForm EditContext="editContext" OnSubmit="Validate">
    <div class="row">
        <div class="col-6">
            <div class="card p-3">
                <div class="form-check">
                    Principal
                </div>
                <div class="mb-3 row">
                    <div class="col-sm-3 col-form-label">Existente</div>
                    <div class="col-sm-9">
                        <InputSelect TValue="Guid" class="form-select" ValueExpression="() => Model.Id">
                            <option value="@(default(Guid))"></option>
                            @foreach (var ft in formats)
                            {
                                <option value="@ft.Id">@ft.ToString()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Model.Id" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <div class="col-sm-3 col-form-label">Formato</div>
                    <div class="col-sm-9">
                        <InputSelect TValue="Guid" class="form-select" ValueExpression="() => Model.FormatTypeFK" ValueChanged="(fk) => ManageChangeFormatType(fk, Model)">
                            <option value="@(default(Guid))"></option>
                            @foreach (var ft in formatTypes)
                            {
                                <option value="@ft.Id">@ft.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Model.FormatTypeFK" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <div class="col-sm-3 col-form-label">Medida</div>
                    <div class="col-sm-9">
                        <InputSelect TValue="int" class="form-select" ValueExpression="() => Model.MeasureTypeFK" ValueChanged="(fk) => ManageChangeMeasure(fk, Model)">
                            <option value="@(default(int))"></option>
                            @foreach (var ft in measureTypes)
                            {
                                <option value="@ft.Id">@ft.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Model.MeasureTypeFK" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <div class="col-sm-3 col-form-label">Valor</div>
                    <div class="col-sm-9">
                        <InputNumber class="form-control" @bind-Value="Model.Value" />
                        <ValidationMessage For="() => Model.Value" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <div class="col-sm-3 col-form-label">Formato</div>
                    <div class="col-sm-9">@Model.ToString()</div>
                </div>
            </div>
        </div>
        <div class="col-6">
            <div class="card p-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="haveDerived" id="derivedMeasureEnable">
                    <label class="form-check-label" for="derivedMeasureEnable">
                        Habilitar medida derivada
                    </label>
                </div>
                <div class="mb-3 row">
                    <div class="col-sm-3 col-form-label">Formato</div>
                    <div class="col-sm-9">
                        <InputSelect TValue="Guid" class="form-select" disabled="@(!haveDerived)" ValueExpression="() => DerivedModel.FormatTypeFK" ValueChanged="(fk) => ManageChangeFormatType(fk, DerivedModel)">
                            <option value="@(default(Guid))"></option>
                            @foreach (var ft in formatTypes)
                            {
                                <option value="@ft.Id">@ft.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => DerivedModel.FormatTypeFK" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <div class="col-sm-3 col-form-label">Medida</div>
                    <div class="col-sm-9">
                        <InputSelect TValue="int" class="form-select" disabled="@(!haveDerived)" ValueExpression="() => DerivedModel.MeasureTypeFK" ValueChanged="(fk) => ManageChangeMeasure(fk, DerivedModel)">
                            <option value="@(default(int))"></option>
                            @foreach (var ft in measureTypes)
                            {
                                <option value="@ft.Id">@ft.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => DerivedModel.MeasureTypeFK" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <div class="col-sm-3 col-form-label">Cantidad</div>
                    <div class="col-sm-9">
                        <InputNumber class="form-control" disabled="@(!haveDerived)" @bind-Value="DerivedModel.Value" />
                        <ValidationMessage For="() => DerivedModel.Value" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <div class="col-sm-3 col-form-label">Formato</div>
                    <div class="col-sm-9 col-form-label">@DerivedModel.ToString()</div>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-2">
        <button type="submit" class="btn btn-outline-primary">Guardar</button>
        <button type="reset" class="btn btn-outline-danger" @onclick="() => OnEditionFinished.InvokeAsync(null)">Descartar</button>
    </div>
</EditForm>

@code {
    [Inject] public IRepoClient Repo { get; set; }
    [Inject] public NotificationService Popup { get; set; }

    [Parameter] public Format Model { get; set; }
    [Parameter] public EventCallback<Format> OnEditionFinished { get; set; }

    private Format DerivedModel = new Format();
    private bool haveDerived = false;
    private IEnumerable<FormatType> formatTypes { get; set; } = Enumerable.Empty<FormatType>();
    private IEnumerable<Format> formats { get; set; } = Enumerable.Empty<Format>();
    private IEnumerable<MeasureType> measureTypes { get; set; } = Enumerable.Empty<MeasureType>();
    private bool active { get; set; }
    private EditContext editContext;
    private ValidationMessageStore validationMessages { get; set; }

    protected override Task OnParametersSetAsync()
    {
        if (Model is null)
            Model = new();

        editContext = new EditContext(Model);
        validationMessages = new ValidationMessageStore(editContext);
        return base.OnParametersSetAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Reload();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    void Validate()
    {
        validationMessages.Clear();
        ValidateModel(Model);
        if (haveDerived)
            ValidateModel(DerivedModel);
        var formReady = editContext.Validate();
        if (formReady)
        {
            if (haveDerived)
                Model.DerivedFormat = DerivedModel;
            OnEditionFinished.InvokeAsync(Model);
        }
    }

    private void ValidateModel(Format model)
    {
        if (model.Id != default(Guid))
        {
            if (model.FormatTypeFK == default(Guid))
                validationMessages.Add(() => model.FormatTypeFK, "Se debe seleccionar un formato");
            if (model.MeasureTypeFK == 0)
                validationMessages.Add(() => model.MeasureTypeFK, "Se debe seleccionar un tipo de medida");
            if (model.Value == 0)
                validationMessages.Add(() => model.MeasureTypeFK, "El valor no puede ser 0");

        }
    }
    private async Task Reload()
    {
        var result1 = await Repo.GetAsync<IEnumerable<FormatType>>(EndpointProduct.FORMAT_TYPE);
        if (result1.Success)
            formatTypes = result1.Response;
        else
            await Popup.ShowError($"No se pudo recuperar información: {await result1.ReadAsStringAsync()}");
        var result2 = await Repo.GetAsync<IEnumerable<MeasureType>>(EndpointProduct.MEASURE_TYPE);
        if (result2.Success)
            measureTypes = result2.Response;
        else
            await Popup.ShowError($"No se pudo recuperar información: {await result2.ReadAsStringAsync()}");
        var result3 = await Repo.GetAsync<IEnumerable<Format>>(EndpointProduct.FORMAT);
        if (result3.Success)
            formats = result3.Response;
        else
            await Popup.ShowError($"No se pudo recuperar información: {await result3.ReadAsStringAsync()}");
        StateHasChanged();

    }

    private void ManageChangeFormatType(Guid formatTypeId, Format model)
    {
        model.FormatTypeFK = formatTypeId;
        model.FormatType = formatTypes.Single(f => f.Id == formatTypeId);
    }
    private void ManageChangeMeasure(int measureTypeId, Format model)
    {
        model.MeasureTypeFK = measureTypeId;
        model.MeasureType = measureTypes.Single(f => f.Id == measureTypeId);
    }
}
