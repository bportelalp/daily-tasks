@page "/signin"
<div class="d-flex justify-content-center">
    <EditForm class="col col-xl-6 col-md-6 col-sm-8" Model="userInfo" OnValidSubmit="CreateUser">
        <div class="form-group">
            <div class="mt-2">
                <label>Nombre de usuario<b class="text-danger">*</b>:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userInfo.Username" />
                    <ValidationMessage For="() => userInfo.Username" />
                </div>
            </div>
            <div class="mt-2">
                <label>Email<b class="text-danger">*</b>:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userInfo.Email" />
                    <ValidationMessage For="() => userInfo.Email" />
                </div>
            </div>
            <div class="mt-2">
                <label>Teléfono:</label>
                <div>
                    <InputText type="text" class="form-control" @bind-Value="@userInfo.PhoneNumber" />
                    <ValidationMessage For="() => userInfo.PhoneNumber" />
                </div>
            </div>
            <div class="mt-2">
                <label>Contraseña<b class="text-danger">*</b>:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userInfo.Password" />
                    <ValidationMessage For="() => userInfo.Password" />
                </div>
            </div>
        </div>
        <DataAnnotationsValidator />
        <button class="btn btn-outline-primary mt-2" type="submit">Registrarse</button>
    </EditForm>
</div>



@code {
    [Inject] IRepoClient repo { get; set; }
    [Inject] NavigationManager navManager { get; set; }
    [Inject] ILoginService loginService { get; set; }
    [Inject] BP.Components.Blazor.UI.FrontendUtils.NotificationService popUp { get; set; }

    private UserCreationDTO userInfo { get; set; } = new UserCreationDTO();

    private async Task CreateUser()
    {
        var response = await repo.PostAsync<UserCreationDTO, UserTokenDTO>(EndpointAccounts.CreateUser, userInfo);
        if (!response.Success)
            await popUp.ShowError(await response.ReadAsStringAsync());
        else
        {
            await loginService.Login(response.Response.Token);
            navManager.NavigateTo("");
        }

    }
}
